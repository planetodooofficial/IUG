from odoo import fields,models,api
from odoo.tools.translate import _
from odoo import tools
from odoo.tools import DEFAULT_SERVER_DATE_FORMAT, DEFAULT_SERVER_DATETIME_FORMAT
import time
from odoo import netsvc
from odoo import SUPERUSER_ID
import odoo
from odoo import api
from odoo.exceptions import UserError

class cancel_event_wizard(models.TransientModel):
    """ A wizard to cancel event send mail to customer """
    _name = 'cancel.event.wizard'

    @api.multi
    def cancel_event(self):
        ''' function to cancel event and cancel Allocation History and send mail'''
        self=self.with_context(interpreter=True)
        res= []
        mod_obj = self.env['ir.model.data']
        cur_obj = self
        event = cur_obj.event_id
        if event:
            if event.event_type == 'language':
                if event.history_id:
                    for history in event.history_id:
                        history.write({'state':'cancel','cancel_date':time.strftime('%Y-%m-%d %H:%M:%S')})
            elif event.event_type == 'transport':
                if event.history_id2:
                    event.history_id2.write({'state':'cancel'})
            elif event.event_type == 'translation':
                if event.history_id3:
                    event.history_id3.write({'state':'cancel'})
            elif event.event_type == 'lang_trans':
                if event.history_id:
                    for history in event.history_id:
                        history.write({'state':'cancel'})
                if event.history_id2:
                    event.history_id2.write({'state':'cancel'} )

            if event.state == 'unbilled':
                wf_service = netsvc.LocalService('workflow')
                pool_obj = odoo.registry(self._cr.dbname)
                with pool_obj.cursor() as cr:
                    env = api.Environment(cr, SUPERUSER_ID, {})
                    if event.cust_invoice_id:
                        data_inv = env['account.invoice'].browse(event.cust_invoice_id.id).read(['state'])
                        for record in data_inv:
                            if record['state'] in ('cancel','paid'):
                                raise UserError(_("Selected invoice(s) cannot be cancelled as they are already in 'Cancelled' or 'Done' state."))
                            wf_service.trg_validate(self.env.uid, 'account.invoice', record['id'], 'invoice_cancel', self._cr)
                    if event.supp_invoice_ids:
                        for interpreter_invoice in event.supp_invoice_ids:
                            data_inv = env['account.invoice'].browse(interpreter_invoice.id).read(['state'])
                            for record in data_inv:
                                if record['state'] in ('cancel','paid'):
                                    raise UserError(_("Selected invoice(s) cannot be cancelled as they are already in 'Cancelled' or 'Done' state."))
                                wf_service.trg_validate(self.env.uid, 'account.invoice', record['id'], 'invoice_cancel', self._cr)
            if event.task_id:
#                    pool_stage = pool_obj.get('project.task.type').search(cr, uid, [('state','=','cancelled')], context=context)
#                    stage_id = pool_stage[0] if pool_stage else 8
#                    event.task_id.write({'stage_id': stage_id})
                        event.task_id.sudo().unlink()
            res = event.write({'cancel_reason_id': cur_obj.cancel_reason_id and cur_obj.cancel_reason_id.id or False,
                                'state':'cancel'})
            template_id = mod_obj.get_object_reference('bista_iugroup', 'cancellation_event')[1]
            
            ############### SMS for event cancellation ##########
            if event.state == 'confirmed':
                try:
                    select_template_body = None
                    sms_template_obj = self.env['sms.template.twilio']
                    get_template_event_cancel = sms_template_obj.search([('action_for','=','event_cancel')])
                    get_contact_cust = event.ordering_contact_id.phone
                    get_interp_contact = event.assigned_interpreters[0].phone
                    event_time_start = event.event_start_hr+':'+event.event_start_min+event.am_pm
                    event_time_end = event.event_end_hr+':'+event.event_end_min+event.am_pm2
                    select_template_body = get_template_event_cancel.sms_text
                    if event.ordering_contact_id.opt_for_sms:
                        if get_contact_cust:
                            if event.event_start_date:
                                event_start_date = event.event_start_date.split('-')[1] + '/' + \
                                                   event.event_start_date.split('-')[2] + '/' + \
                                                   event.event_start_date.split('-')[0]
                            else:
                                event_start_date = event.event_start_date
                            sms_vals = {
                                        'sms_body': select_template_body%(event.name,event_start_date,
                                                                      event_time_start,event_time_end,
                                                                      event.location_id.state_id.name,event.location_id.city,
                                                                      event.location_id.zip),
                                        'sms_to': get_contact_cust
                                    }
                            self.env['twilio.sms.send'].create(sms_vals)
                    if event.assigned_interpreters[0].opt_for_sms:
                        if get_interp_contact:
                            if event.event_start_date:
                                event_start_date = event.event_start_date.split('-')[1] + '/' + \
                                                   event.event_start_date.split('-')[2] + '/' + \
                                                   event.event_start_date.split('-')[0]
                            else:
                                event_start_date = event.event_start_date
                            sms_vals = {
                                        'sms_body': select_template_body%(event.name,event_start_date,
                                                                      event_time_start,event_time_end,
                                                                      event.location_id.state_id.name,event.location_id.city,
                                                                      event.location_id.zip),
                                        'sms_to': get_interp_contact
                                    }
                            self.env['twilio.sms.send'].create(sms_vals)
                except Exception:
                    pass

                    res = event.sudo().action_mail_send(event, 'event', template_id)
        return res

    @api.model
    def default_get(self, fields):
        res = {}
        res = super(cancel_event_wizard , self).default_get(fields)
        print self.id
        event_ids = self._context.get('active_ids', [])
        if not event_ids or len(event_ids) != 1:
            return res
        event = self.env['event'].browse(event_ids[0])
        event_id, = event_ids
        if 'event_id' in fields:
            res.update(event_id = event_id)
        if 'company_id' in fields:
            res.update(company_id = event.company_id and event.company_id.id)
        return res


    cancel_reason_id=fields.Many2one('cancel.reason', 'Cancel Reason')
    event_id=fields.Many2one("event", "Event Id" )
    company_id=fields.Many2one("res.company", "Company Id")