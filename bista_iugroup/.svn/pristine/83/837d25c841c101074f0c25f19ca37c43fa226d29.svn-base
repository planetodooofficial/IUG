# -*- coding: utf-8 -*-
##############################################################################
#
#    OpenERP, Open Source Business Applications
#    Copyright (C) 2004-2012 OpenERP S.A. (<http://openerp.com>).
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################

import re
import time
from odoo import models, fields,api
from odoo.tools.translate import _
from odoo import SUPERUSER_ID, tools

w_types = [('warning','Warning'),('info','Information'),('error','Error')]

class warning_transporter(models.TransientModel):
    _name = 'warning.translator'
    _rec_name = 'title'

    history_id =fields.Many2one("select.translator.line", "History Id" ,)
    event_id=fields.Many2one("event", "Event Id" ,)
    title=fields.Char("Title", size=32)
    warning_message=fields.Text("Message")
    type=fields.Selection([('warning','Warning'),('info','Information'),('error','Error')],
                            string='Status',)

    @api.model
    def _get_view_id(self):
        res = self.env['ir.model.data'].sudo().get_object_reference('bista_iugroup', 'warning_translator_form')
        if res:
            return res[1]
        else:
            return False

    @api.model
    def message(self):
        message = self
        message_type = [t[1]for t in w_types if message.type == t[0]][0]
        res = {
            'name': '%s: %s' % (_(message_type), _(message.title)),
            'view_type': 'form',
            'view_mode': 'form',
            'view_id': self._get_view_id(),
            'res_model': 'warning.translator',
            'domain': [],
            'context': self._context,
            'type': 'ir.actions.act_window',
            'target': 'new',
            'res_id': message.id
        }
        return res

    @api.model
    def warning(self,title, message):
        id = self.sudo().create({'title': title, 'warning_message': message, 'type': 'warning'})
        res = self.message()
        return res

    # def info(self, cr, uid, title, message, context=None):
    #     res = []
    #     return res
    #
    # def error(self, cr, uid, title, message, context=None):
    #     res = []
    #     return res
    @api.multi
    def update_translator(self):
        ''' This function updates or assigns translator in the event form '''
        self=self.with_context(translator=True)
        res,template_id= [],False
        mod_obj = self.env['ir.model.data']
        event_id = self._context.get('event_id',False)
        history_id = self._context.get('history_id',False)
#        print "event_id....history_id......",event_id,history_id
        user = self.env.user
        if event_id:
            event_brw = self.env['event'].sudo().browse(event_id)
            if history_id:
                history = self.env['select.translator.line'].sudo().browse(history_id)
                res = event_id.sudo().write({'translator_id':history.translator_id and history.translator_id.id or False,'state':'allocated'})
                res = history.sudo().write({'state': 'assigned'})
            assign_history_id = event_brw.translation_assignment_history_id
#                print"assign_history_id",assign_history_id
            if assign_history_id:
                assign_history_id.write({'state':'removed'})
            assign_new_history_id=self.env['assign.translator.history'].sudo().create({'partner_id':event_brw.partner_id and event_brw.partner_id.id or False,'name':history.translator_id and history.translator_id.id or False,
                'event_id':event_brw.id,'event_date':event_brw.event_date ,'event_start':event_brw.event_start,'event_end':event_brw.event_end,'state':'assign','company_id': event_brw.company_id and event_brw.company_id.id or False,
                'schedule_translator_event_time':time.strftime('%Y-%m-%d %H:%M:%S'),'language_id':event_brw.language_id.id})
            event_brw.sudo().write({'translation_assignment_history_id':assign_new_history_id,'schedule_event_time':time.strftime('%Y-%m-%d %H:%M:%S')})
#            if user.user_type and user.user_type == 'vendor':
#                self.pool.get('event').event_confirm_mail(cr ,uid , [event_id] , context=context)
#                self.pool.get('event').confirm_event(cr ,uid , [event_id] , context=context)
#                res = mod_obj.get_object_reference(cr, uid, 'bista_iugroup', 'view_event_user_form')
#                res_id = res and res[1] or False,
##                print "res_id.......",res_id
#                return {
#                    'name': _('Event'),
#                    'view_type': 'form',
#                    'view_mode': 'form',
#                    'view_id': [res_id[0]],
#                    'res_model': 'event',
#                    'type': 'ir.actions.act_window',
#                    'nodestroy': True,
#                    'target': 'current',
#                    'res_id': event_id or False,
#                }
#                return  res
#            else:
            event = self.env['event'].browse(event_id)
            if not event.suppress_email:
                template_id = mod_obj.sudo().get_object_reference('bista_iugroup', 'event_allocation_customer')[1]
    #                res = self.pool.get('event').action_mail_send( cr, uid, ids , event_brw, 'event', template_id, context=context)
                if template_id:
                    mail_message = self.env['mail.template'].sudo().browse(template_id).send_mail(event_id)
            template_id1 = mod_obj.sudo().get_object_reference('bista_iugroup', 'event_allocation_translator')[1]
            if template_id1:
                res = event_brw.sudo().action_mail_send(event_brw, 'event', template_id1)

        return res

    @api.model
    def default_get(self,fields):
        res = {}
        res = super(warning_transporter , self).default_get(fields)
        wiz_ids = self._context.get('active_ids', [])
#        print "wiz_ids........",wiz_ids
        if not wiz_ids or len(wiz_ids) != 1:
            return res
        wiz_id, = wiz_ids
#        wiz = self.pool.get('assign.transp.wizard').browse(cr, uid, wiz_ids[0], context=context)
        event_id = self._context.get('event_id',False)

        history_id = self._context.get('history_id',False)
#        print "event_id....history_id......",event_id,history_id
        if 'event_id' in fields:
            res.update({'event_id':event_id})
        if 'history_id' in fields:
            res.update({'history_id':history_id})
#        if 'event_id' in fields:
#            res.update(event_id = wiz.event_id.id)
#        if 'history_id' in fields:
#            res.update(history_id = wiz.history_id.id)
        return res